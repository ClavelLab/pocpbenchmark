#!/usr/bin/env python3

"""Filter out the GTDB metadata with only valid names to shortlist genomes."""

import pandas as pd

# Import GTDB information with only the important information
# usecols is also memory efficient for large DataFrames
bacteria_data = pd.read_table('gtdb_metadata.tsv', usecols=["accession", "gtdb_representative","gtdb_taxonomy"])

f_details = open("details_counts.txt", "a")
f_details.write( 'Number of genomes: ' + str(len(bacteria_data.index)) + '\n')

red_reduced_data = bacteria_data.loc[bacteria_data['gtdb_representative'] == 't'] # Reduce the dataset to only representative genomes

f_details.write( 'Number of representatives genomes: ' + str(len(red_reduced_data.index)) + '\n')

# An intermediate DataFrame is needed for splitting a column into x columns
# otherwise SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
#  See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
df_taxonomy = red_reduced_data['gtdb_taxonomy'].str.split(';',expand=True) # Split taxonomy into multiple columns based on level
df_taxonomy.columns = ['Domain','Phylum','Class','Order','Family','Genus','Species']

split_red_reduced_data = pd.concat([red_reduced_data, df_taxonomy], axis = 1) # Combine the two DataFrame by columns

f_details.write( 'Number of representatives genomes with correct taxonomy; ' + str(len(split_red_reduced_data.index)) + '\n')


# This code reads in the LPSN valid names file generated by Protologger
valid_names = []

ln = 0
for line in open('valid_names.tsv','r'):
    ln +=1
    if ln >1:
        genus,species = line.replace('\n','').split('\t')
        valid_names.append('s__' + genus + ' ' + species)



valid_split_red_reduced_data = split_red_reduced_data[split_red_reduced_data['Species'].isin(valid_names)] # Filters species to only include those in LPSN with a valid name
valid_split_red_reduced_data.head()
f_details.write( 'Number of representatives genomes with valid names: ' + str(len(valid_split_red_reduced_data.index)) + '\n')



number_of_genera = valid_split_red_reduced_data.groupby(['Genus'])['Genus'].count() # Count number of species per genera
genera_to_keep = number_of_genera[number_of_genera > 10].index.tolist() # Only those with >10 species in a genus selected
genus_valid_split_red_reduced_data = valid_split_red_reduced_data[valid_split_red_reduced_data['Genus'].isin(genera_to_keep)] # Conducts the filtering
f_details.write( 'Number of representatives genomes with valid names and >10 species in their genus:  ' + str(len(genus_valid_split_red_reduced_data.index)) + '\n')

# Several genomes were selected with only one genus per family thus hindering the within-family comparison
number_of_genera_per_family = genus_valid_split_red_reduced_data.loc[:, ['Family','Genus']].drop_duplicates().groupby('Family').size()
# Keep Families with at least two valid genus to be able to do within family comparison
families_to_keep = number_of_genera_per_family[number_of_genera_per_family > 1].index.tolist()

shorlisted_genomes = genus_valid_split_red_reduced_data[genus_valid_split_red_reduced_data['Family'].isin(families_to_keep)] # Conducts the filtering
f_details.write( 'Number of representatives genomes with valid names and >10 species in their genus and >1 genera per family: ' + str(len(shorlisted_genomes.index)))
f_details.close()

shorlisted_genomes.to_csv('shortlisted_genomes.csv') # Output file with final filtered data
